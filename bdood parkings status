import os
import cx_Oracle
import pandas as pd
import numpy as np
import folium
from folium.plugins import HeatMap

start_date = '17-Jul-21'
end_date = '24-Jul-21'


def oracle_connect():
    try:
        os.environ["ORACLE_HOME"] = "C:\instantclient_19_3"
        db = cx_Oracle.connect(user='report', password='report',
                               dsn='(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = tcp)(host = "185.147.162.215") (Port = 1521))) (CONNECT_DATA = (SID = "nodood")))',
                               encoding='UTF-8')
        return db

    except cx_Oracle.DatabaseError as ora_exception:
        error, = ora_exception.args
        print("Oracle Error Code: ", error.code)
        print("Oracle Error Message: ", error.message)


db = oracle_connect()

sql1 = """ select LATITUDE, LONGITUDE, TITLE, CITY_ID from nodood.b_parking"""

parking = pd.read_sql(sql1, db)
parking_long = parking.iloc[:, 1]
parking_long.to_numpy()
parking_lat = parking.iloc[:, 0]
parking_lat.to_numpy()
parking_title = parking.iloc[:, 2]
parking_title.to_numpy()
city_name=parking.iloc[:,3]
city_name.to_numpy()

for c in range(len(city_name)):
    if city_name[c]==b'\xa4\x99\x850OuBH\x9d\xc1]&\xbb\xed"\xe5':
        city_name[c]='TEHRAN'
    if city_name[c]==b'\xf9\xca6^\xacqGw\x85\x17\x03\x1aB#\x80\x05':
        city_name[c]='SHIRAZ'

sql2 = """select bt.ID, bt.trip_route_information, bt.user_id,bt.END_LONGITUDE,bt.END_LATITUDE,bt.START_LONGITUDE,bt.START_LATITUDE, su.mobile_number,bt.distance,(bt.DURATION/60000)trip_duration, ((bt.distance/1000)/(bt.DURATION/3600000))trip_average_speed, bt.ended_by, bt.start_time,EXTRACT(HOUR FROM bt.end_time) H,bt.LOCK_ID, EXTRACT(DAY FROM bt.start_time) || '/' ||EXTRACT(MONTH FROM bt.start_time)  || '/' ||EXTRACT(YEAR FROM bt.start_time) DATE_TIME from NODOOD.b_trip bt,nodood.sec_user su
where su.id=bt.user_id and bt.start_time >= '%s' and  bt.start_TIME < '%s' and bt.status in('P','R') and bt.duration>0
and su.mobile_number not in ('09053618611','09053618613','09053618615','09053618624','09053618631','09053618630','09053618616','09053618607','09053618626','09053618609','09053618632','09053618640','09053618604','09053618620','09053618612','09126873420','09388938800','09106657286','09379411984','09120364192','09373187628','09197370273','09039120212') --Tehran Staff
--and bt.DURATION>2*60000 and bt.DURATION<180*60000
and bt.DISTANCE>10 and bt.DISTANCE<10000
""" % (start_date, end_date)

trip = pd.read_sql(sql2, db)
end_long = trip.iloc[:, 3]
end_long.to_numpy()
end_lat = trip.iloc[:, 4]
end_lat.to_numpy()
start_long = trip.iloc[:, 5]
start_long.to_numpy()
start_lat = trip.iloc[:, 6]
start_lat.to_numpy()
print(np.size(end_lat))

p = 0
q = 0

distend = np.zeros(len(parking_long))
diststart = np.zeros(len(parking_long))
endparkingno = np.zeros(len(parking_long))
startparkingno = np.zeros(len(parking_long))
results = np.zeros(len(parking_long))



for i in range(len(end_lat)):
    for J in range(len(parking_long)):

        l1 = np.sin(end_lat[i] * np.pi / 180) * np.sin(parking_lat[J] * np.pi / 180)
        l2 = np.cos(end_lat[i] * np.pi / 180) * np.cos(parking_lat[J] * np.pi / 180)
        l3 = np.cos(parking_long[J] * np.pi / 180 - end_long[i] * np.pi / 180)
        distend[J] = np.arccos(l1 + l2 * l3) * 6371000
        d1 = np.sin(start_lat[i] * np.pi / 180) * np.sin(parking_lat[J] * np.pi / 180)
        d2 = np.cos(start_lat[i] * np.pi / 180) * np.cos(parking_lat[J] * np.pi / 180)
        d3 = np.cos(parking_long[J] * np.pi / 180 - start_long[i] * np.pi / 180)
        diststart[J] = np.arccos(d1 + d2 * d3) * 6371000
        if distend[J] <= 200:
            endparkingno[J] = endparkingno[J] + 1

        if diststart[J] <= 200:
            startparkingno[J] = startparkingno[J] + 1

    if np.min(distend) <= 200:
        p = p + 1

    if np.min(diststart) <= 200:
        q = q + 1

tripno = len(end_long)
print('تعداد کل سفر', '\t', len(end_long))
print('تعداد سفرهای آغاز شده از داخل پارکینگ', '\t', q)
print('تعداد سفرهای خاتمه یافته به داخل پارکینگ', '\t', p)
print('ردیف', '\t', 'نام پارکینگ', '\t', 'تعداد سفر آغاز شده از پارکینگ', '\t',
      'درصد سفرهای آغاز شده از پارکینگ از کل سفرها', '\t', 'تعداد سفرهای خاتمه یافته در پارکینگ', '\t',
      'درصد سفرهای خاتمه یافته در پارکینگ از کل سفرها', '\t',
      'نام شهر')


for k in range(len(parking_long)):
    print(k + 1, '\t', parking_title[k], '\t', startparkingno[k], '\t', startparkingno[k] / tripno * 100, '\t',
          endparkingno[k], '\t', endparkingno[k] / tripno * 100,  '\t',  city_name[k])

